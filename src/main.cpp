/*
 ******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.2   2017-05-20

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

 ******************************************************************************
 */

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "utils/commandline.h"
#include <usb/usb_stm32.h>
#include <usb/usb_device_class_audio.h>
#include <usb/usb_device_class_cdc_vcp.h>
#include <usb/usb_device_class_cdc_rndis.h>
#include <utils/io_pin_stm32.h>
#include <utils/serialnumber.h>
#include <utils/interrupt_stm32.h>
#include "control/Robo.h"

extern "C"{
#include "usb_dcd_int.h"
#include "usb_hcd_int.h"
}

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

/**
 **===========================================================================
 **
 **  Abstract: main program
 **
 **===========================================================================
 */
extern CommandLine cmdline;

IO_Pin_STM32 USB_DP(IO_Pin::IO_Pin_Mode_SPECIAL, GPIOA, GPIO_Pin_11, GPIO_PuPd_NOPULL, GPIO_OType_PP, GPIO_AF_OTG_FS);
IO_Pin_STM32 USB_DM(IO_Pin::IO_Pin_Mode_SPECIAL, GPIOA, GPIO_Pin_12, GPIO_PuPd_NOPULL, GPIO_OType_PP, GPIO_AF_OTG_FS);

uint8_t USB_DEVICE_CLASS::_numinterfaces=0;
uint8_t USB_DEVICE_CLASS::_numinendpoints=1;
uint8_t USB_DEVICE_CLASS::_numoutendpoints=1;
uint8_t USB_DEVICE_CLASS::_numdescriptorstrings=6;
std::list<USB_DEVICE_CLASS*> USB_DEVICE_CLASS::_usb_device_classes_list;

USB_DEVICE_CLASS_CDC_RNDIS usb_device_class_cdc_rndis(0);
USB_DEVICE_CLASS_CDC_VCP usb_device_class_cdc_vcp(1);
USB_DEVICE_CLASS_AUDIO usb_device_class_audio(0);

int desired_speed; //velocidade
int speed[10]; //vetor que armazena as 10 ultimas medicoes de velocidade da roda
int encoderCount[10]; //vetor que armazena as 10 ultimas medicoes de velocidade da roda
float convert = 2*3.14159265*0.028*1000/(10*400*8); //2*pi*raio_da_roda/(10ms*400divisoes*8tx_de_transf)
int max_speed = 3000;

USB_STM32 usb(0x29BC, 0x0002, "IME", "Microcontroladores 2018", SerialNumberGetHexaString());

INTERRUPT_STM32 usb_otg_fs_interrupt(OTG_FS_IRQn, 0x0D, 0x0D, ENABLE);

/**************************** MOTORES ************************************/
/*
 * PINAGEM DO MOTOR0:
 * MAH: PC9 -> TIM8_CH4
 * MAL: PE5 -> GPIO_OUT
 * MBH PC7 -> TIM8_CH2
 * MBL: PC13 -> GPIO_OUT
*/
Pwm ahpwm0(GPIOC, GPIO_Pin_9, TIM8, GPIO_PinSource9, GPIO_AF_TIM8, 4, false);
GPIO algpio0(GPIOE, GPIO_Pin_5);
Pwm bhpwm0(GPIOC, GPIO_Pin_7, TIM8, GPIO_PinSource7, GPIO_AF_TIM8, 2, false);
GPIO blgpio0(GPIOC, GPIO_Pin_13);
Encoder encoder0(GPIOB, GPIOB, GPIO_Pin_4, GPIO_Pin_5, TIM3, GPIO_PinSource4, GPIO_PinSource5, GPIO_AF_TIM3);
Motor motor0(&ahpwm0, &algpio0, &bhpwm0, &blgpio0, &encoder0);

/*
 * PINAGEM DO MOTOR1:
 * MAH: PA8 -> TIM1_CH1
 * MAL: PE6 -> GPIO_OUT
 * MBH PC8 -> TIM8_CH3
 * MBL: PE4 -> GPIO_OUT
*/
Pwm ahpwm1(GPIOA, GPIO_Pin_8, TIM1, GPIO_PinSource8, GPIO_AF_TIM1, 1, false);
GPIO algpio1(GPIOE, GPIO_Pin_6);
Pwm bhpwm1(GPIOC, GPIO_Pin_8, TIM8, GPIO_PinSource8, GPIO_AF_TIM8, 3, false);
GPIO blgpio1(GPIOE, GPIO_Pin_4);
Encoder encoder1(GPIOA, GPIOB, GPIO_Pin_15, GPIO_Pin_3, TIM2, GPIO_PinSource15, GPIO_PinSource3, GPIO_AF_TIM2);
Motor motor1(&ahpwm1, &algpio1, &bhpwm1, &blgpio1, &encoder1);

/*
 * PINAGEM DO MOTOR2:
 * MAH: PC6 -> TIM8_CH1
 * MAL: PC2 -> GPIO_OUT
 * MBH PCE11 -> TIM1_CH2
 * MBL: PB1 -> GPIO_OUT
*/
Pwm ahpwm2(GPIOC, GPIO_Pin_6, TIM8, GPIO_PinSource6, GPIO_AF_TIM8, 1, false);
GPIO algpio2(GPIOC, GPIO_Pin_2);
Pwm bhpwm2(GPIOE, GPIO_Pin_11, TIM1, GPIO_PinSource11, GPIO_AF_TIM1, 2, false);
GPIO blgpio2(GPIOB, GPIO_Pin_1);
Encoder encoder2(GPIOA, GPIOA, GPIO_Pin_0, GPIO_Pin_1, TIM5, GPIO_PinSource0, GPIO_PinSource1, GPIO_AF_TIM5);
Motor motor2(&ahpwm2, &algpio2, &bhpwm2, &blgpio2, &encoder2);

/*
 * PINAGEM DO MOTOR3:
 * MAH: PE14 -> TIM1_CH4
 * MAL: PB12 -> GPIO_OUT
 * MBH PE13 -> TIM1_CH3
 * MBL: PB11 -> GPIO_OUT
*/
Pwm ahpwm3(GPIOE, GPIO_Pin_14, TIM1, GPIO_PinSource14, GPIO_AF_TIM1, 4, false);
GPIO algpio3(GPIOB, GPIO_Pin_12);
Pwm bhpwm3(GPIOE, GPIO_Pin_13, TIM1, GPIO_PinSource13, GPIO_AF_TIM1, 3, false);
GPIO blgpio3(GPIOB, GPIO_Pin_11);
Encoder encoder3(GPIOB, GPIOB, GPIO_Pin_6, GPIO_Pin_7, TIM4, GPIO_PinSource6, GPIO_PinSource7, GPIO_AF_TIM4);
Motor motor3(&ahpwm3, &algpio3, &bhpwm3, &blgpio3, &encoder3);

Robo robo(&motor0, &motor1, &motor2, &motor3);
/*********************************************************************/

/***************************** PWM ******************************/
/*
 * PINAGEM DO MOTOR0:
 * MBH: PC9 -> TIM8_CH4
 * MAH: PC7 -> TIM8_CH2
 * MBL PC13 -> GPIO_OUT
 * MAL: PE5 -> GPIO_OUT
*/

/*
void MBL_GPIO_Init(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_13;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
}

void MAL_GPIO_Init(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_5;
	GPIO_Init(GPIOE, &GPIO_InitStructure);

	GPIO_ResetBits(GPIOE, GPIO_Pin_5);
}

void PWM_GPIO_Init(int duty_cycle){
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitTypeDef gpioStructure;
	gpioStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_9;
	gpioStructure.GPIO_Mode = GPIO_Mode_AF;
	gpioStructure.GPIO_Speed = GPIO_Speed_100MHz;
	gpioStructure.GPIO_OType = GPIO_OType_PP;
	gpioStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &gpioStructure);



	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = (SystemCoreClock/2000000)-1;
	//timerInitStructure.TIM_Prescaler = 7; //(SysClock/21000000)-1

	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	//timerInitStructure.TIM_Period = 1049; //(SysClock/(Prescaler+1))/20kHz-1 = 100% dutycyle
	timerInitStructure.TIM_Period = 1000;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM8, &timerInitStructure);


	TIM_OCInitTypeDef outputChannelInit = {0,};
	outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
	outputChannelInit.TIM_Pulse = duty_cycle;
	outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
	outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
	outputChannelInit.TIM_OCIdleState = TIM_OCIdleState_Reset;

	TIM_OC2Init(TIM8, &outputChannelInit);
	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);

	TIM_OC4Init(TIM8, &outputChannelInit);
	TIM_OC4PreloadConfig(TIM8, TIM_OCPreload_Enable);

	TIM_Cmd(TIM8, ENABLE);
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
}

void Set_duty_cycle(int duty_cycle, int pin){
	if (pin == 7){
		TIM8->CCR4 = 0; //PC7
		TIM8->CCR2 = duty_cycle; //PC9
	}
	else if (pin == 9){
		TIM8->CCR2 = 0; //PC9
		TIM8->CCR4 = duty_cycle; //PC7
	}
	else {
		TIM8->CCR2 = 0;
		TIM8->CCR4 = 0;
	}
}

void M0_Init(){
	MBL_GPIO_Init();
	MAL_GPIO_Init();
	PWM_GPIO_Init(0);
}
/****************************************************************/


/******************** Leitura de Encoder ************************/
/*
 * PINAGEM DO ENCODER:
 * ENCA: PB4 -> TIM3_CH1
 * ENCB: PB5 -> TIM3_CH2
 *
 */

/*
void TimerEncM0_Init(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_TIM3);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);


	//TIM_DeInit(TIM3);

	TIM_Cmd(TIM3,ENABLE);
	//TIM_SetCounter(TIM3, (uint32_t) 0);
	//TIM_SetAutoreload(TIM3, 9999);//0x226=550
}
/****************************************************************/

/************************* Controle *****************************/
/*
*TIM6 gera interrupção a cada 1ms para atualização dos valores de controle
*/
void TimerVel_Init(){
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
  TIM_DeInit(TIM6);

  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_ClockDivision=0;
  TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
  TIM_TimeBaseStructure.TIM_Prescaler=83;
  TIM_TimeBaseStructure.TIM_Period=999;
  TIM_TimeBaseInit(TIM6,&TIM_TimeBaseStructure);


  TIM_ITConfig(TIM6,TIM_IT_Update,ENABLE);
  TIM_Cmd(TIM6,ENABLE);
}

//Inicializa interrupção do timer 6
void TIM6_NVIC_Init(){
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0C;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0C;

	NVIC_Init(&NVIC_InitStructure);
}

/*
void speed_conversion(){
	if (desired_speed<0){
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
		TIM8->CCR4 = 0; //PC7 RST

		GPIO_SetBits(GPIOE, GPIO_Pin_5);
		TIM8->CCR2 = -1000*desired_speed/max_speed; //PC9 PWM DUTY CYCLE
	}
	else if (desired_speed>=0){
		GPIO_ResetBits(GPIOE, GPIO_Pin_5);
		TIM8->CCR2 = 0; //PC9 RST

		GPIO_SetBits(GPIOC, GPIO_Pin_13);
		TIM8->CCR4 = 1000*desired_speed/max_speed; //PC7 PWM CUTY CYCLE
	}
}

//Atualiza os vetores de velocidade e do contador de encoder
void controle(){
	int currentCount, currentSpd;

	currentCount = TIM_GetCounter(TIM3);

	for (int i=9; i>0; i--){
		encoderCount[i]=encoderCount[i-1];
		speed[i]=speed[i-1];
	}

	encoderCount[0]=currentCount;

	currentSpd = 1000*(encoderCount[0] - encoderCount[9])*convert; //x1000 para nao ter necessidade de utilizar float
	speed[0]=currentSpd;

	speed_conversion();
}

int pid_speed(int input){
	int output;
	int e[20];
	int derror;
	int ierror;
	int A=1;
	int kp, ki, kd;

	e[0] = desired_speed - speed[0];

	derror = e[0]-e[1];

	ierror=0;
	for (int j=1; j<20; j++){
		ierror+=e[j];
	}

	if (ierror > 3000) ierror = 3000;
	if (ierror < -3000) ierror = -3000;

	output = A*desired_speed + kp*e[0] + ki*ierror + kd*derror;

	return output;
}
/****************************************************************/

int main(void)
{
	robo.init();
	usb.Init(); //Configura comunicação Serial via USB
	/**
	 *  IMPORTANT NOTE!
	 *  The symbol VECT_TAB_SRAM needs to be defined when building the project
	 *  if code has been located to RAM and interrupts are used.
	 *  Otherwise the interrupt table located in flash will be used.
	 *  See also the <system_*.c> file and how the SystemInit() function updates
	 *  SCB->VTOR register.
	 *  E.g.  SCB->VTOR = 0x20000000;
	 */

	/* Initialize LEDs */
	STM_EVAL_LEDInit(LED3);
	STM_EVAL_LEDInit(LED4);
	STM_EVAL_LEDInit(LED5);
	STM_EVAL_LEDInit(LED6);

	/*Encoder_Init*/
	//TimerEncM0_Init();
	TimerVel_Init();

	/*Motor_Init*/
	//M0_Init();

	/*TIM6 Interrupt Init*/
	TIM6_NVIC_Init();

	/* Infinite loop */
	CircularBuffer<uint8_t> buffer(0,1024);
	while (1)
	{
		uint16_t size=usb_device_class_cdc_vcp.GetData(buffer,256);
		if(size) {
			cmdline.In(buffer);
		}

		uint8_t buffer[32];
		do{
			size=cmdline.Out(buffer, 32);
			if(size){
				usb_device_class_cdc_vcp.SendData(buffer, size);
			}
		} while(size==32);
	}
}

extern USB_OTG_CORE_HANDLE USB_OTG_dev;
extern "C" void OTG_FS_IRQHandler(void){
	USBD_OTG_ISR_Handler (&USB_OTG_dev);
	USBH_OTG_ISR_Handler (&USB_OTG_dev);
}

extern "C" void OTG_FS_WKUP_IRQHandler(void){
	if(USB_OTG_dev.cfg.low_power){
		*(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
		SystemInit();
		USB_OTG_UngateClock(&USB_OTG_dev);
	}
	EXTI_ClearITPendingBit(EXTI_Line18);
}

//Declara interrupcao do timer6
extern "C" void TIM6_DAC_IRQHandler(){
	if(TIM_GetITStatus(TIM6,TIM_IT_Update)){
		TIM_ClearITPendingBit(TIM6,TIM_IT_Update);
		//controle(); //funcao que atualiza os valores de controle chamada a cada 1ms
		robo.get_wheel_speed();
		robo.control_robo_speed(robo.speed);
	}
}

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
	/* TODO, implement your code here */
	return;
}

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
	/* TODO, implement your code here */
	return -1;
}
